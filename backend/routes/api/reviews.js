const express = require('express');
const { Op } = require('sequelize');
const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');
const { requireAuth, authorization } = require('../../utils/auth');
const { Review, Spot, SpotImage, ReviewImage, User, sequelize } = require('../../db/models');
const { handle } = require('express/lib/router');
const review = require('../../db/models/review');

const router = express.Router();

const validateReview = [
	check('review')
		.exists({ checkFalsy: true })
		.notEmpty()
		.isLength({ min: 3 })
		.withMessage("Review text is required"),
	check('stars')
		.exists({ checkFalsy: true })
		.notEmpty()
		.isInt({ min: 1, max: 5 })
		.withMessage("Stars must be an integer from 1 to 5"),
	handleValidationErrors
]

//Create and return a new image for a review specified by id
router.post('/:reviewId/images', requireAuth, authorization, async (req, res) => {
	const { url } = req.body;

	const { reviewId } = req.params;
	const review = await Review.findByPk(reviewId);

	if (!review) {
		return res
			.status(404)
			.json({
				"message": "Review couldn't be found",
				statusCode: 404
			})
	}


	const existingImages = await ReviewImage.findAll({
		attributes: ['id', 'url'],
		where: {
			reviewId
		}
	})

	if (existingImages.length >= 10) {
		return res
			.status(403)
			.json({
				"message": "Maximum number of images for this resource was reached",
				statusCode: 403
			})
	}


	const createImage = await ReviewImage.create({
		reviewId,
		url
	})

	const imageRes = {
		id: createImage.id,
		url: createImage.url
	}
	existingImages.push(imageRes)

	res.json(imageRes)
})



// get reviews written by the current user
router.get('/current', handleValidationErrors, requireAuth, async (req, res) => {

	// no req body

	// any owner/ user id?

	const reviews = await Review.findAll({
		where: {
			userId: req.user.id
		},
		include: [
			{
				model: User,
				attributes: ['id', 'firstName', 'lastName'],
				where: {
					id: req.user.id
				}
			},
			{
				model: Spot,
				attributes: {
					exclude: ['createdAt', 'updatedAt', 'description']
				},
				include: {
					model: SpotImage,
					where:
						{ preview: true },
					attributes: ['url'],
					limit: 1,
					separate: true // forces Sequelize to use separate query

				}
			},
			{
				model: ReviewImage,
				attributes: {
					exclude: ['createdAt', 'updatedAt', 'reviewId']
				}
			}
		],
		subQuery: false
	});


	const reviewPayload = await Promise.all(reviews.map(async (review) => {
		const spotData = review.Spot.toJSON();
		const reviewData = review.toJSON();
		reviewData.Spot = spotData;

		return reviewData;

	}))


	res.json({
		Reviews: reviewPayload
	});

})


router.put('/:reviewId', requireAuth, validateReview, authorization, async (req, res, next) => {

	const { review, stars } = req.body;
	const { reviewId } = req.params;
	const reviewUpdate = await Review.findByPk(reviewId, {
		attribute: {
			exclude: []
		}
	})

	if (!review) {
		res
			.status(404)
			.json({
				message: "Review couldn't be found"
			})
	}

	try {
		reviewUpdate.review = review
		reviewUpdate.stars = stars

		await reviewUpdate.save();

		res.json(reviewUpdate)

	} catch (error) {
		if (!Number(reviewUpdate.stars) || !reviewUpdate.review) {
			return res
				.status(400)
				.json({
					"message": "Bad Request", // (or "Validation error" if generated by Sequelize),
					"errors": {
						"review": "Review text is required",
						"stars": "Stars must be an integer from 1 to 5",
					}
				})
		}

	}
})

router.delete('/:reviewId', requireAuth, authorization, async (req, res) => {
	const { user } = req;
	const { reviewId } = req.params;
	const userId = req.user.id;
	const review = await Review.findByPk(reviewId, {
		where: {
			userId
		}
	})

	if (!review) {
		return res
			.status(404)
			.json({
				"message": "Review couldn't be found"
			})
	}
	await review.destroy()

	res
		.status(200)
		.json({
			"message": "Successfully deleted"
		})

})







module.exports = router;
